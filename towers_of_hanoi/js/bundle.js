!function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},o.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=2)}([function(t,e){t.exports=class{constructor(t,e){this.game=t,this.el=e,this.setupBoard()}bindEvents(){}makeMove(){}setupBoard(){this.el.append("booooo")}}},function(t,e){t.exports=class{constructor(){this.towers=[[3,2,1],[],[]]}isValidMove(t,e){const o=this.towers[t],n=this.towers[e];return 0!==o.length&&(0==n.length||o[o.length-1]<n[n.length-1])}isWon(){return 3==this.towers[2].length||3==this.towers[1].length}move(t,e){return!!this.isValidMove(t,e)&&(this.towers[e].push(this.towers[t].pop()),!0)}print(){console.log(JSON.stringify(this.towers))}promptMove(t,e){this.print(),t.question("Enter a starting tower: ",o=>{const n=parseInt(o);t.question("Enter an ending tower: ",t=>{const o=parseInt(t);e(n,o)})})}run(t,e){this.promptMove(t,(o,n)=>{this.move(o,n)||console.log("Invalid move!"),this.isWon()?(this.print(),console.log("You win!"),e()):this.run(t,e)})}}},function(t,e,o){const n=o(1),r=o(0);$(()=>{const t=$(".hanoi"),e=new n;new r(e,t)})}]);