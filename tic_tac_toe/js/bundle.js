!function(t){var r={};function n(e){if(r[e])return r[e].exports;var s=r[e]={i:e,l:!1,exports:{}};return t[e].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:e})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=4)}([function(t,r){t.exports=function(t){this.msg=t}},function(t,r,n){const e=n(0);class s{constructor(){this.grid=s.makeGrid()}isEmptyPos(t){if(!s.isValidPos(t))throw new e("Is not valid position!");return null===this.grid[t[0]][t[1]]}isOver(){if(null!=this.winner())return!0;for(let t=0;t<3;t++)for(let r=0;r<3;r++)if(this.isEmptyPos([t,r]))return!1;return!0}placeMark(t,r){if(!this.isEmptyPos(t))throw new e("Is not an empty position!");this.grid[t[0]][t[1]]=r}print(){const t=[];for(let r=0;r<3;r++){const n=[];for(let t=0;t<3;t++)n.push(this.grid[r][t]?this.grid[r][t]:" ");t.push(`${n.join("|")}\n`)}console.log(t.join("-----\n"))}winner(){const t=[[[0,0],[0,1],[0,2]],[[1,0],[1,1],[1,2]],[[2,0],[2,1],[2,2]],[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]],[[0,0],[1,1],[2,2]],[[2,0],[1,1],[0,2]]];for(let r=0;r<t.length;r++){const n=this.winnerHelper(t[r]);if(null!=n)return n}return null}winnerHelper(t){for(let r=0;r<s.marks.length;r++){const n=s.marks[r];let e=!0;for(let r=0;r<3;r++){const s=t[r];this.grid[s[0]][s[1]]!=n&&(e=!1)}if(e)return n}return null}static isValidPos(t){return 0<=t[0]&&t[0]<3&&0<=t[1]&&t[1]<3}static makeGrid(){const t=[];for(let r=0;r<3;r++){t.push([]);for(let n=0;n<3;n++)t[r].push(null)}return t}}s.marks=["x","o"],t.exports=s},function(t,r,n){const e=n(1),s=n(0);t.exports=class{constructor(){this.board=new e,this.currentPlayer=e.marks[0]}isOver(){return this.board.isOver()}playMove(t){this.board.placeMark(t,this.currentPlayer),this.swapTurn()}promptMove(t,r){this.board.print(),console.log(`Current Turn: ${this.currentPlayer}`),t.question("Enter rowIdx: ",n=>{const e=parseInt(n);t.question("Enter colIdx: ",t=>{const n=parseInt(t);r([e,n])})})}run(t,r){this.promptMove(t,n=>{try{this.playMove(n)}catch(t){if(!(t instanceof s))throw t;console.log(t.msg)}this.isOver()?(this.board.print(),this.winner()?console.log(`${this.winner()} has won!`):console.log("NO ONE WINS!"),r()):this.run(t,r)})}swapTurn(){this.currentPlayer===e.marks[0]?this.currentPlayer=e.marks[1]:this.currentPlayer=e.marks[0]}winner(){return this.board.winner()}}},function(t,r){t.exports=class{constructor(t,r){this.game=t,this.el=r,this.setupBoard()}bindEvents(){}makeMove(t){}setupBoard(){const t=$("<ul>");t.addClass("board");for(let r=0;r<3;r++)for(let n=0;n<3;n++){const e=$("<li>");e.data("pos",[r,n]),t.append(e)}this.el.append(t)}}},function(t,r,n){const e=n(3),s=n(2);$(()=>{const t=new s,r=$(".ttt");new e(t,r)})}]);